{"ast":null,"code":"var _jsxFileName = \"/Users/dcmckay04/Desktop/WebDev/Code Projects/ZenGarden/zengarden/src/Components/Quote.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { db } from \"../firebase\";\nimport Share from \"./Share\";\nimport { Transition } from \"react-transition-group\";\nimport \"./Quote.css\";\n\nconst Quote = quoteProps => {\n  const duration = 300;\n  const defaultStyle = {\n    transition: `opacity ${duration}ms ease-in-out`,\n    opacity: 0\n  };\n  const transitionStyles = {\n    entering: {\n      opacity: 1\n    },\n    entered: {\n      opacity: 1\n    },\n    exiting: {\n      opacity: 0\n    },\n    exited: {\n      opacity: 0\n    }\n  };\n  const [state, setState] = useState({\n    quote: \"\",\n    name: \"\"\n  });\n\n  const getQuoteHandler = () => {\n    setInProp(false);\n    var docRef = db.collection(\"quotes\");\n    docRef.get().then(querySnapshot => {\n      const data = querySnapshot.docs.map(doc => doc.data());\n      const rand = Math.floor(Math.random() * data.length);\n      setState({ ...state,\n        quote: data[rand].quote,\n        name: data[rand].name\n      });\n    });\n    setInProp(true);\n  };\n\n  useEffect(() => {\n    getQuoteHandler();\n  }, []);\n  const quote = /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"MainQuote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, state.quote), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"ByQuote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, state.name, \" \"), \" \");\n  const [inProp, setInProp] = useState(false);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Transition, {\n    in: inProp,\n    timeout: 300,\n    appear: true,\n    in: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Quote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, state => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Share, {\n    name: state.name,\n    quote: state.quote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  })))), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"QuoteBtn\",\n    onClick: getQuoteHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"Get a new quote\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"FavoritesBtn\",\n    onClick: () => quoteProps.favorite(state),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fa fa-heart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default Quote;","map":{"version":3,"sources":["/Users/dcmckay04/Desktop/WebDev/Code Projects/ZenGarden/zengarden/src/Components/Quote.js"],"names":["React","useState","useEffect","db","Share","Transition","Quote","quoteProps","duration","defaultStyle","transition","opacity","transitionStyles","entering","entered","exiting","exited","state","setState","quote","name","getQuoteHandler","setInProp","docRef","collection","get","then","querySnapshot","data","docs","map","doc","rand","Math","floor","random","length","inProp","favorite"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { db } from \"../firebase\";\nimport Share from \"./Share\";\nimport { Transition } from \"react-transition-group\";\nimport \"./Quote.css\";\n\nconst Quote = (quoteProps) => {\n  const duration = 300;\n\n  const defaultStyle = {\n    transition: `opacity ${duration}ms ease-in-out`,\n    opacity: 0,\n  };\n\n  const transitionStyles = {\n    entering: { opacity: 1 },\n    entered: { opacity: 1 },\n    exiting: { opacity: 0 },\n    exited: { opacity: 0 },\n  };\n\n  const [state, setState] = useState({\n    quote: \"\",\n    name: \"\",\n  });\n\n  const getQuoteHandler = () => {\n    setInProp(false);\n    var docRef = db.collection(\"quotes\");\n    docRef.get().then((querySnapshot) => {\n      const data = querySnapshot.docs.map((doc) => doc.data());\n      const rand = Math.floor(Math.random() * data.length);\n      setState({\n        ...state,\n        quote: data[rand].quote,\n        name: data[rand].name,\n      });\n    });\n    setInProp(true);\n  };\n\n  useEffect(() => {\n    getQuoteHandler();\n  }, []);\n\n  const quote = (\n    <div>\n      <p className=\"MainQuote\">{state.quote}</p>\n      <span className=\"ByQuote\">{state.name} </span>{\" \"}\n    </div>\n  );\n\n  const [inProp, setInProp] = useState(false)\n\n  return (\n    <>\n      <Transition in={inProp} timeout={300} appear in>\n        <div className=\"Quote\">\n          {state => (\n            <>\n          <Share name={state.name} quote={state.quote}/>\n          </>\n          )}\n        </div>\n      </Transition>\n\n      <span>\n        <button className=\"QuoteBtn\" onClick={getQuoteHandler}>\n          Get a new quote\n        </button>\n        <button\n          className=\"FavoritesBtn\"\n          onClick={() => quoteProps.favorite(state)}\n        >\n          <i className=\"fa fa-heart\"></i>\n        </button>\n      </span>\n    </>\n  );\n};\n\nexport default Quote;\n"]},"metadata":{},"sourceType":"module"}