{"ast":null,"code":"var _jsxFileName = \"/Users/dcmckay04/Desktop/WebDev/Code Projects/ZenGarden/zengarden/src/Components/Quote.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useTransition, animated, config } from \"react-spring\";\nimport { db } from \"../firebase\";\nimport Share from './Share';\nimport \"./Quote.css\";\n\nconst Quote = quoteProps => {\n  const [state, setState] = useState({\n    quote: \"\",\n    name: \"\"\n  });\n  const [show, set] = useState(true);\n  const transitions = useTransition(state.quote, null, {\n    from: {\n      position: \"fixed\",\n      top: \"120px\",\n      right: \"10%\",\n      opacity: 0\n    },\n    enter: {\n      opacity: 1\n    },\n    leave: {\n      opacity: 0\n    },\n    delay: 3000,\n    config: config.molasses\n  });\n\n  const getQuoteHandler = () => {\n    set(false);\n    var docRef = db.collection(\"quotes\");\n    docRef.get().then(querySnapshot => {\n      const data = querySnapshot.docs.map(doc => doc.data());\n      const rand = Math.floor(Math.random() * data.length);\n      setState({ ...state,\n        quote: data[rand].quote,\n        name: data[rand].name\n      });\n    });\n  };\n\n  useEffect(() => {\n    getQuoteHandler();\n  }, []);\n  const quote = /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"MainQuote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, state.quote), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"ByQuote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, state.name, \" \"), \" \");\n  return /*#__PURE__*/React.createElement(React.Fragment, null, transitions.map(({\n    item,\n    key,\n    props\n  }) => item && /*#__PURE__*/React.createElement(animated.div, {\n    className: \"Quote\",\n    key: key,\n    style: props,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, quote, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Share, {\n    name: state.name,\n    quote: state.quote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"QuoteBtn\",\n    onClick: getQuoteHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, \"Get a new quote\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"FavoritesBtn\",\n    onClick: () => quoteProps.favorite(state),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fa fa-heart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default Quote;","map":{"version":3,"sources":["/Users/dcmckay04/Desktop/WebDev/Code Projects/ZenGarden/zengarden/src/Components/Quote.js"],"names":["React","useState","useEffect","useTransition","animated","config","db","Share","Quote","quoteProps","state","setState","quote","name","show","set","transitions","from","position","top","right","opacity","enter","leave","delay","molasses","getQuoteHandler","docRef","collection","get","then","querySnapshot","data","docs","map","doc","rand","Math","floor","random","length","item","key","props","favorite"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useTransition, animated, config } from \"react-spring\";\nimport { db } from \"../firebase\";\nimport Share from './Share';\n\nimport \"./Quote.css\";\n\nconst Quote = quoteProps => {\n  const [state, setState] = useState({\n    quote: \"\",\n    name: \"\"\n  });\n\n  const [show, set] = useState(true);\n  const transitions = useTransition(state.quote, null, {\n    from: { position: \"fixed\", top: \"120px\", right: \"10%\", opacity: 0 },\n    enter: { opacity: 1 },\n    leave: { opacity: 0 },\n    delay: 3000,\n    config: config.molasses\n  });\n\n  const getQuoteHandler = () => {\n    set(false);\n    var docRef = db.collection(\"quotes\");\n    docRef.get().then(querySnapshot => {\n      const data = querySnapshot.docs.map(doc => doc.data());\n      const rand = Math.floor(Math.random() * data.length);\n      setState({\n        ...state,\n        quote: data[rand].quote,\n        name: data[rand].name\n      });\n    });\n  };\n\n  useEffect(() => {\n    getQuoteHandler();\n  }, []);\n\n  const quote = (\n    <div>\n      <p className=\"MainQuote\">{state.quote}</p>\n      <span className=\"ByQuote\">{state.name} </span>{\" \"}\n    </div>\n  );\n\n  \n\n  return (\n    <>\n      {transitions.map(\n        ({ item, key, props }) =>\n          item && (\n            <animated.div className=\"Quote\" key={key} style={props}>\n              {quote}\n              <br/>\n              <Share name={state.name} quote={state.quote} />\n            </animated.div>\n          )\n      )}\n      <span>\n        <button className=\"QuoteBtn\" onClick={getQuoteHandler}>\n          Get a new quote\n        </button>\n        <button\n          className=\"FavoritesBtn\"\n          onClick={() => quoteProps.favorite(state)}\n        >\n          <i className=\"fa fa-heart\"></i>\n        </button>\n      </span>\n    </>\n  );\n};\n\nexport default Quote;\n"]},"metadata":{},"sourceType":"module"}