{"version":3,"sources":["Components/NavBar.js","Components/Share.js","Pages/Favorites.js","firebase.js","Components/Quote.js","Components/QuoteContainer.js","Components/HomeContainer.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","to","Share","props","FacebookShareButton","url","quote","text","name","onClick","e","stopPropagation","target","Favorites","useState","setCopied","useEffect","JSON","parse","window","localStorage","getItem","copyClickHandler","populateFavorites","favoritesList","map","favorite","key","copy","removeFavorite","noFavorites","length","db","firebase","initializeApp","apiKey","process","REACT_APP_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Quote","quoteProps","state","setState","show","setShow","transitions","useTransition","from","position","top","right","opacity","enter","leave","config","molasses","getQuoteHandler","setTimeout","collection","get","then","querySnapshot","data","docs","doc","rand","Math","floor","random","style","transition","item","div","QuoteContainer","this","load","click","Component","HomeContainer","favorites","setFavorites","favoritesFromLS","setItem","stringify","addToFavoritesHandler","passedQuote","newFavorites","includes","push","newFavStringify","removeFavoritesHandler","filter","fav","exact","path","render","App","Boolean","location","hostname","match","require","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83c0875b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./NavBar.css\";\nimport { Link } from \"react-router-dom\";\n\nconst NavBar = () => {\n    return (\n      <div className=\"NavBar\">\n        <Link to=\"/\">\n          <h1>ZenGarden</h1>\n          </Link>\n\n          <ul className=\"NavList\">\n            <Link to=\"/favorites\">Favorites</Link>\n          </ul>\n      </div>\n    );\n  }\n\nexport default NavBar;\n","import React from \"react\";\nimport { FacebookShareButton } from \"react-share\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport \"./Share.css\";\n\nconst Share = (props) => {\n  const copyClickHandler = (e) => {\n    e.stopPropagation();\n    e.target.className = \"far fa-copy Copied\";\n  }\n\n  return (\n    <span>\n      <FacebookShareButton url=\"https://www.google.com\" quote={props.quote}>\n        <i className=\"fab fa-facebook\"></i>\n      </FacebookShareButton>{\" \"}\n      <CopyToClipboard text={`${props.quote} – ${props.name}`}>\n        <i className=\"far fa-copy NotCopied\" onClick={copyClickHandler}></i>\n      </CopyToClipboard>\n    </span>\n  );\n};\n\nexport default Share;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Favorites.css\";\nimport Share from '../Components/Share';\n\n\nconst Favorites = props => {\n  const [isCopied, setCopied] = useState(false);\n\n  let favorites = [];\n\n  function getFavoritesFromLS() {\n    favorites = JSON.parse(window.localStorage.getItem(\"favorites\"));\n  }\n\n  useEffect(() => {\n    getFavoritesFromLS();\n  }, []);\n\n  const copyClickHandler = (e) => {\n    e.stopPropagation();\n    e.target.className = \"far fa-copy Copied\";\n    setCopied(true);\n  }\n\n  const populateFavorites = props.favoritesList.map(favorite => {\n    return (\n      <li key={favorite.quote}>\n        {favorite.quote} – {favorite.name}{\" \"}\n       <Share quote={favorite.quote} name={favorite.name} copy={copyClickHandler}/>\n        {' '}\n        <i className=\"fa fa-trash\" onClick={() => props.removeFavorite(favorite)}></i>\n      </li>\n    );\n  });\n\n  const noFavorites = <li>Looks like you don't have any favorites yet!</li>;\n\n  return (\n    <div className=\"Favorites\">\n      <h3>Your favorites</h3>\n      <ul className=\"FavoritesList\">{props.favoritesList.length > 0 ? populateFavorites : noFavorites}</ul>\n    </div>\n  );\n};\n\nexport default Favorites;\n","import firebase from \"firebase\";\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: \"zengarden-14251.firebaseapp.com\",\n  databaseURL: \"https://zengarden-14251.firebaseio.com\",\n  projectId: \"zengarden-14251\",\n  storageBucket: \"zengarden-14251.appspot.com\",\n  messagingSenderId: \"592463493439\",\n  appId: \"1:592463493439:web:7089c6beb59b47da6d3b8a\",\n  measurementId: \"G-QBV38XX51P\"\n});\n\nconst db = firebaseApp.firestore();\n\nexport { firebaseApp, db };\n","import React, { useState, useEffect } from \"react\";\nimport { useTransition, animated, config } from \"react-spring\";\nimport { db } from \"../firebase\";\nimport Share from \"./Share\";\n\nimport \"./Quote.css\";\n\nconst Quote = (quoteProps) => {\n  const [state, setState] = useState({\n    quote: \"\",\n    name: \"\",\n  });\n\n  const [show, setShow] = useState(true);\n  const transitions = useTransition(show, null, {\n    from: { position: \"fixed\", top: \"120px\", right: \"10%\", opacity: 0 },\n    enter: { opacity: 1 },\n    leave: { opacity: 0 },\n    config: config.molasses,\n  });\n\n  const getQuoteHandler = () => {\n    setShow(false);\n    setTimeout(() => {\n      var docRef = db.collection(\"quotes\");\n      docRef.get().then((querySnapshot) => {\n        const data = querySnapshot.docs.map((doc) => doc.data());\n        const rand = Math.floor(Math.random() * data.length);\n        setState({\n          ...state,\n          quote: data[rand].quote,\n          name: data[rand].name,\n        });\n        setShow(true);\n      }, 10000);\n    });\n  };\n\n  useEffect(() => {\n    getQuoteHandler();\n  }, []);\n\n  const quote = (\n    <div\n      style={\n        show\n          ? { opacity: 1, transition: \"all ease-in 1s\" }\n          : { opacity: 0, transition: \"all ease-out 1s\" }\n      }\n    >\n      <p className=\"MainQuote\">{state.quote}</p>\n      <span className=\"ByQuote\">{state.name} </span>{\" \"}\n    </div>\n  );\n\n  return (\n    <>\n      {transitions.map(\n        ({ item, key, props }) =>\n          item && (\n            <animated.div className=\"Quote\" key={key} style={props}>\n              {quote}\n              <br />\n              <Share name={state.name} quote={state.quote} />\n            </animated.div>\n          )\n      )}\n      <span>\n        <button className=\"QuoteBtn\" onClick={getQuoteHandler}>\n          Get a new quote\n        </button>\n        <button\n          className=\"FavoritesBtn\"\n          onClick={() => quoteProps.favorite(state)}\n        >\n          <i className=\"fa fa-heart\"></i>\n        </button>\n      </span>\n    </>\n  );\n};\n\nexport default Quote;\n","import React, { Component } from \"react\";\nimport Quote from \"./Quote\";\n\nimport \"./QuoteContainer.css\";\n\nclass QuoteContainer extends Component {\n  render() {\n    return (\n      <div className=\"QuoteContainer\">\n        <Quote quote={this.props.quote} name={this.props.name} load={this.props.click} favorite={this.props.favorite}/>\n      </div>\n    );\n  }\n}\n\nexport default QuoteContainer;\n","import React, { useState, useEffect } from \"react\";\nimport NavBar from \"./NavBar\";\nimport Favorites from \"../Pages/Favorites\";\nimport QuoteContainer from \"./QuoteContainer\";\nimport { Route } from \"react-router-dom\";\n\nimport \"./HomeContainer.css\";\n\nconst HomeContainer = () => {\n  const [favorites, setFavorites] = useState([]);\n\n  useEffect(() => {\n    if (localStorage[\"favorites\"]) {\n      const favoritesFromLS = localStorage.getItem(\"favorites\");\n      setFavorites(JSON.parse(favoritesFromLS));\n    } else {\n      localStorage.setItem(\"favorites\", JSON.stringify([]));\n    }\n  }, []);\n\n  const addToFavoritesHandler = (passedQuote) => {\n    let newFavorites = [...favorites];\n    if (!favorites.includes(passedQuote)) {\n      newFavorites.push(passedQuote);\n      const newFavStringify = JSON.stringify(newFavorites);\n      localStorage.setItem(\"favorites\", newFavStringify);\n      setFavorites(newFavorites);\n    }\n  };\n\n  const removeFavoritesHandler = (passedQuote) => {\n    let newFavorites = favorites.filter((fav) => fav !== passedQuote);\n    const newFavStringify = JSON.stringify(newFavorites);\n    localStorage.setItem(\"favorites\", newFavStringify);\n    setFavorites(newFavorites);\n  };\n\n  return (\n    <div className=\"HomeContainer\">\n      <NavBar />\n      <Route\n        exact\n        path=\"/favorites\"\n        render={() => (\n          <Favorites\n            favoritesList={favorites}\n            removeFavorite={removeFavoritesHandler}\n          />\n        )}\n      />\n      <Route\n        exact\n        path=\"/\"\n        render={() => <QuoteContainer favorite={addToFavoritesHandler} />}\n      />\n    </div>\n  );\n};\n\nexport default HomeContainer;\n","import React from \"react\";\nimport \"./App.css\";\nimport HomeContainer from \"./Components/HomeContainer\";\n\nconst App = () =>  {\n    return (\n      <div className=\"App\">\n        <HomeContainer />\n      </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nrequire('dotenv').config({ path: '../src/.env' });\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}